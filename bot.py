import asyncio
import logging
import io

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BufferedInputFile,
    CallbackQuery,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import chess
import chess.pgn

from boardrender import render_board_png
from loadgames import getlastlichessgames, getlastchesscomgames
from stockfishanalyse import findmove, geteval, stockfish_best_move

from connection import (
    init_db, upsert_user, get_user_nicks,
    save_game, load_games, save_blunders,
    load_unsolved_blunders, get_game_pgn,
    mark_blunder_solved
)

logging.basicConfig(level=logging.INFO)
BOT_TOKEN = '8449137700:AAEaGnBplBuYKlBcoQtn-TltQJ5dZomDxNk'

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

init_db()

pending_binding: dict[int, str] = {}

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—åüë§"),       KeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –∏–≥—Äüîç")],
        [KeyboardButton(text="–ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

profile_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å Lichess"), KeyboardButton(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å Chess.com")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

analysis_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—ã"), KeyboardButton(text="–ú–æ–∏ –æ—à–∏–±–∫–∏")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

class ErrorsSG(StatesGroup):
    WAIT_ANSWER = State()


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChessHelper! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø–∞—Ä—Ç–∏–∏. "
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç lichess –∏/–∏–ª–∏ chess.com –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ—Ñ–∏–ª—å",
        reply_markup=main_kb
    )

@dp.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—åüë§")
async def open_profile(message: Message):
    lichess_nick, chesscom_nick = get_user_nicks(message.chat.id)
    await message.answer(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.chat.id}\n"
        f"–ü—Ä–æ—Ñ–∏–ª—å lichess: {lichess_nick}\n"
        f"–ü—Ä–æ—Ñ–∏–ª—å chess.com: {chesscom_nick}",
        reply_markup=profile_kb
    )

@dp.message(F.text == "–ê–Ω–∞–ª–∏–∑ –∏–≥—Äüîç")
async def open_analysis(message: Message):
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–ê–Ω–∞–ª–∏–∑ –∏–≥—Ä¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=analysis_kb)

@dp.message(F.text == "–ü–æ–º–æ—â—å")
async def help_command(message: Message):
    text = (
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º:\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å Lichess/Chess.com\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–∏–∏ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –æ—à–∏–±–∫–∏\n"
        "‚Ä¢ –ù–∞–∑–∞–¥ ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )
    await message.answer(text, reply_markup=main_kb)

@dp.message(F.text == "–ü—Ä–∏–≤—è–∑–∞—Ç—å Lichess")
async def on_bind_lichess(message: Message):
    pending_binding[message.chat.id] = "lichess"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –Ω–∞ Lichess:", reply_markup=profile_kb)

@dp.message(F.text == "–ü—Ä–∏–≤—è–∑–∞—Ç—å Chess.com")
async def on_bind_chesscom(message: Message):
    pending_binding[message.chat.id] = "chesscom"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –Ω–∞ Chess.com:", reply_markup=profile_kb)

@dp.message(lambda msg: msg.chat.id in pending_binding and pending_binding[msg.chat.id] == "lichess")
async def bind_lichess_nick(message: Message):
    nick = message.text.strip()
    upsert_user(message.chat.id, lichess=nick)
    pending_binding.pop(message.chat.id, None)
    await message.answer(f"Lichess —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω: {nick}", reply_markup=profile_kb)

@dp.message(lambda msg: msg.chat.id in pending_binding and pending_binding[msg.chat.id] == "chesscom")
async def bind_chesscom_nick(message: Message):
    nick = message.text.strip()
    upsert_user(message.chat.id, chesscom=nick)
    pending_binding.pop(message.chat.id, None)
    await message.answer(f"Chess.com —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω: {nick}", reply_markup=profile_kb)

@dp.message(F.text == "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—ã")
async def sync_games(message: Message):
    chat_id = message.chat.id
    lichess_nick, chesscom_nick = get_user_nicks(chat_id)
    if not (lichess_nick or chesscom_nick):
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å.",reply_markup=analysis_kb)

    await message.answer("–ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é‚Ä¶", reply_markup=analysis_kb)

    jobs: list[tuple[str, str]] = []
    if lichess_nick:
        lichess_pgns = getlastlichessgames(lichess_nick, max_games=30, period=7)
        jobs += [("lichess", p) for p in lichess_pgns]
    if chesscom_nick:
        chesscom_pgns = getlastchesscomgames(chesscom_nick, max_games=30, period=7)
        jobs += [("chesscom", p) for p in chesscom_pgns]

    new_game_count = 0
    total_blunders = 0
    loop = asyncio.get_running_loop()

    for source, pgn in jobs:
        game_id, is_new = save_game(chat_id, source, pgn)
        if not is_new:
            continue
        new_game_count += 1

        try:
            evals    = await loop.run_in_executor(None, geteval, pgn)
            bad_idxs = await loop.run_in_executor(None, findmove, evals)
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä—Ç–∏–∏ {game_id}: {e}")
            continue

        blunders = []
        for idx in bad_idxs:
            fen = get_fen_at_move(pgn, idx)
            blunders.append((idx, fen))

        save_blunders(game_id, blunders)
        total_blunders += len(blunders)

    await message.answer(f"üÜï –ù–æ–≤—ã—Ö –ø–∞—Ä—Ç–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {new_game_count}\n"
                         f"‚ùå –ù–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_blunders}",reply_markup=analysis_kb)


def _calc_played_san_and_opponent(pgn: str, move_idx: int, user_color: str) -> tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (played_san, opponent_name)
    played_san ‚Äî SAN —Å—ã–≥—Ä–∞–Ω–Ω–æ–≥–æ –≤ –ø–∞—Ä—Ç–∏–∏ —Ö–æ–¥–∞ –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ move_idx.
    opponent_name ‚Äî –Ω–∏–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ PGN.
    """
    game = chess.pgn.read_game(io.StringIO(pgn))
    if not game:
        return "?", "?"
    # –û–ø–ø–æ–Ω–µ–Ω—Ç
    white_hdr = game.headers.get("White", "")
    black_hdr = game.headers.get("Black", "")
    opponent = black_hdr if user_color == "w" else white_hdr

    # SAN —Ö–æ–¥–∞ –Ω–∞ move_idx
    board = game.board()
    for i, move in enumerate(game.mainline_moves()):
        if i == move_idx:
            try:
                san = board.san(move)
            except Exception:
                san = "?"
            return san, opponent
        board.push(move)
    return "?", opponent

def _pretty_source_name(source: str) -> str:
    return "chess.com" if source == "chesscom" else "lichess"

async def _send_error_card(bot: Bot, chat_id: int, err: dict):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É —Å –∫—Ä–∞—Å–∏–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π ¬´–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ¬ª.
    """
    bl_id   = err["blunder_id"]
    move_no = err["move_idx"] // 2 + 1  # –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ö–æ–¥–∞
    src     = _pretty_source_name(err["source"])
    fen     = err["fen"]
    flip    = (err["user_color"] == "b")

    # –ü–æ–ª—É—á–∞–µ–º PGN, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å played_san –∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    pgn = get_game_pgn(err["game_id"])
    played_san, opponent = _calc_played_san_and_opponent(pgn, err["move_idx"], err["user_color"])

    # –†–µ–Ω–¥–µ—Ä PNG
    buf = render_board_png(fen, square_size=60, flip=flip)
    data = buf.getvalue()
    buf.close()
    photo = BufferedInputFile(data, filename="board.png")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
                    callback_data=f"soln:{err['idx']}"
                )
            ]
        ]
    )

    caption = (
        f"–ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ ¬´{opponent}¬ª –Ω–∞ {src}\n"
        f"–•–æ–¥ ‚Ññ{move_no}. –í –ø–∞—Ä—Ç–∏–∏ –≤—ã —Å—ã–≥—Ä–∞–ª–∏ ¬´{played_san}¬ª, —á—Ç–æ —É—Ö—É–¥—à–∏–ª–æ –ø–æ–∑–∏—Ü–∏—é. "
        f"–ù–∞–π–¥–∏—Ç–µ –ª—É—á—à–µ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ.\n"
        f"–í–≤–µ–¥–∏—Ç–µ –ª—É—á—à–∏–π —Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ SAN (–Ω–∞–ø—Ä–∏–º–µ—Ä, Nf3), –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ¬ª."
    )
    await bot.send_photo(
        chat_id=chat_id,
        photo=photo,
        caption=caption,
        reply_markup=kb
    )


@dp.message(F.text == "–ú–æ–∏ –æ—à–∏–±–∫–∏")
async def show_errors(message: Message, state: FSMContext):
    """
    –ì–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –¢–û–õ–¨–ö–û –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∑–∞ —Å—Ç–æ—Ä–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º –∑–∞–¥–∞—á, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é.
    """
    chat_id = message.chat.id
    lichess_nick, chesscom_nick = get_user_nicks(chat_id)
    rows = load_unsolved_blunders(chat_id)
    if not rows:
        return await message.answer(
            "–ù–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–µ –ø–∞—Ä—Ç–∏–∏ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=analysis_kb
        )

    user_blunders: list[dict] = []
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–∑–∏—Ü–∏–∏, –≥–¥–µ —Ö–æ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    for r in rows:
        game_id, move_idx, fen_before, source = (
            r["game_id"], r["move_index"], r["fen_before"], r["source"]
        )

        pgn = get_game_pgn(game_id)
        if not pgn:
            continue
        game = chess.pgn.read_game(io.StringIO(pgn))
        if not game:
            continue

        white_hdr = game.headers.get("White", "").lower()
        black_hdr = game.headers.get("Black", "").lower()
        user_nick = (lichess_nick if source == "lichess" else chesscom_nick or "").lower()

        if user_nick == white_hdr:
            user_color = "w"
        elif user_nick == black_hdr:
            user_color = "b"
        else:
            continue

        # —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if fen_before.split()[1] != user_color:
            continue

        user_blunders.append({
            "idx": len(user_blunders),  # –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            "blunder_id": r["blunder_id"],
            "game_id": game_id,
            "move_idx": move_idx,
            "fen": fen_before,
            "source": source,
            "user_color": user_color
        })

    if not user_blunders:
        return await message.answer(
            "–ü—Ä–æ–º–∞—Ö–æ–≤ –∑–∞ –≤–∞—à—É —Å—Ç–æ—Ä–æ–Ω—É —Å—Ä–µ–¥–∏ –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=analysis_kb
        )

    await state.update_data(errors=user_blunders, current_idx=0)
    await state.set_state(ErrorsSG.WAIT_ANSWER)
    await _send_error_card(message.bot, chat_id, user_blunders[0])

@dp.message(ErrorsSG.WAIT_ANSWER)
async def process_user_attempt(message: Message, state: FSMContext):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–≤–æ–π —Ö–æ–¥ (SAN –∏–ª–∏ UCI).
    –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî –ø–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É —Ä–µ—à—ë–Ω–Ω–æ–π.
    –õ—é–±–æ–π –æ—Ç–≤–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–°–ª–µ–¥—É—é—â–∞—è¬ª.
    """
    data = await state.get_data()
    errors = data.get("errors", [])
    current_idx = data.get("current_idx", 0)
    if not errors:
        await state.clear()
        return await message.answer("–ó–∞–¥–∞—á –Ω–µ—Ç. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.", reply_markup=analysis_kb)

    err = errors[current_idx]
    board = chess.Board(err["fen"])
    try:
        best = stockfish_best_move(err["fen"])
        best_san = board.san(best)
    except Exception as e:
        logging.exception(f"Engine error: {e}")
        return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –ª—É—á—à–∏–π —Ö–æ–¥ –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏.", reply_markup=analysis_kb)

    user_text = (message.text or "").strip()
    solved = False
    if user_text:
        # –ü—ã—Ç–∞–µ–º—Å—è SAN
        try:
            b2 = chess.Board(err["fen"])
            mv = b2.parse_san(user_text)
            solved = (mv == best)
        except Exception:
            # –ü—ã—Ç–∞–µ–º—Å—è UCI
            try:
                mv = chess.Move.from_uci(user_text.lower())
                solved = (mv == best)
            except Exception:
                solved = False

    if solved:
        mark_blunder_solved(err["blunder_id"])
        verdict = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        verdict = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ–¥: {best_san}"

    next_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ",
                    callback_data=f"next:{current_idx}"
                )
            ]
        ]
    )
    await message.answer(verdict, reply_markup=next_kb)

@dp.callback_query(F.data.startswith("soln:"), ErrorsSG.WAIT_ANSWER)
async def on_show_solution(query: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–µ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏ –ø–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—É—é.
    """
    await query.answer()
    _, idx_str = query.data.split(":")
    idx = int(idx_str)

    data = await state.get_data()
    errors = data.get("errors", [])
    if not (0 <= idx < len(errors)):
        return await query.message.answer("–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    err = errors[idx]
    board = chess.Board(err["fen"])
    try:
        best = stockfish_best_move(err["fen"])
        best_san = board.san(best)
    except Exception as e:
        logging.exception(f"Engine error: {e}")
        return await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –ª—É—á—à–∏–π —Ö–æ–¥ –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏.")

    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—É—é –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ—à–µ–Ω–∏—è
    mark_blunder_solved(err["blunder_id"])

    next_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ",
                    callback_data=f"next:{idx}"
                )
            ]
        ]
    )
    await query.message.answer(f"üí° –õ—É—á—à–∏–π —Ö–æ–¥: {best_san}", reply_markup=next_kb)
    await state.update_data(current_idx=idx)

@dp.callback_query(F.data.startswith("next:"), ErrorsSG.WAIT_ANSWER)
async def on_next_task(query: CallbackQuery, state: FSMContext):
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ—Ä–µ—à—ë–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ.
    –ï—Å–ª–∏ –∑–∞–¥–∞—á –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º.
    """
    await query.answer()
    _, idx_str = query.data.split(":")
    prev_idx = int(idx_str)

    data = await state.get_data()
    errors = data.get("errors", [])
    next_idx = prev_idx + 1

    if next_idx >= len(errors):
        await query.message.answer("–≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞.", reply_markup=analysis_kb)
        return await state.clear()

    await state.update_data(current_idx=next_idx)
    await _send_error_card(query.bot, query.message.chat.id, errors[next_idx])

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def go_back(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

@dp.message()
async def fallback(message: Message):
    await message.answer(
        "–ù–µ –ø–æ–Ω—è–ª –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.",
        reply_markup=main_kb
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

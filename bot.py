import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from loadgames import getlastlichessgames, getlastchesscomgames
from stockfishanalyse import findmove, geteval

from connection import (
    init_db, upsert_user, get_user_nicks,
    save_game, load_games, save_blunders, load_blunders,
    get_fen_at_move
)

logging.basicConfig(level=logging.INFO)
BOT_TOKEN = '8449137700:AAEaGnBplBuYKlBcoQtn-TltQJ5dZomDxNk'

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

init_db()

pending_binding: dict[int, str] = {}

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—åüë§"),       KeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –∏–≥—Äüîç")],
        [KeyboardButton(text="–ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

profile_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å Lichess"), KeyboardButton(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å Chess.com")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

analysis_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—ã"), KeyboardButton(text="–ú–æ–∏ –æ—à–∏–±–∫–∏")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChessHelper! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø–∞—Ä—Ç–∏–∏. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç lichess –∏/–∏–ª–∏ chess.com –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ—Ñ–∏–ª—å",reply_markup=main_kb)

@dp.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—åüë§")
async def open_profile(message: Message):
    lichess_nick, chesscom_nick = get_user_nicks(message.chat.id)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.chat.id}\n–ü—Ä–æ—Ñ–∏–ª—å lichess: {lichess_nick}\n–ü—Ä–æ—Ñ–∏–ª—å chess.com: {chesscom_nick}",reply_markup=profile_kb)

@dp.message(F.text == "–ê–Ω–∞–ª–∏–∑ –∏–≥—Äüîç")
async def open_analysis(message: Message):
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–ê–Ω–∞–ª–∏–∑ –∏–≥—Ä¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",reply_markup=analysis_kb)

@dp.message(F.text == "–ü–æ–º–æ—â—å")
async def help_command(message: Message):
    text = (
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º:\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å Lichess/Chess.com\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–∏–∏ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –æ—à–∏–±–∫–∏\n"
        "‚Ä¢ –ù–∞–∑–∞–¥ ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )
    await message.answer(text, reply_markup=main_kb)

@dp.message(F.text == "–ü—Ä–∏–≤—è–∑–∞—Ç—å Lichess")
async def on_bind_lichess(message: Message):
    pending_binding[message.chat.id] = "lichess"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –Ω–∞ Lichess:", reply_markup=profile_kb)

@dp.message(F.text == "–ü—Ä–∏–≤—è–∑–∞—Ç—å Chess.com")
async def on_bind_chesscom(message: Message):
    pending_binding[message.chat.id] = "chesscom"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –Ω–∞ Chess.com:", reply_markup=profile_kb)

@dp.message(lambda msg: msg.chat.id in pending_binding and pending_binding[msg.chat.id] == "lichess")
async def bind_lichess_nick(message: Message):
    nick = message.text.strip()
    upsert_user(message.chat.id, lichess=nick)
    pending_binding.pop(message.chat.id, None)
    await message.answer(f"Lichess —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω: {nick}", reply_markup=profile_kb)

@dp.message(lambda msg: msg.chat.id in pending_binding and pending_binding[msg.chat.id] == "chesscom")
async def bind_chesscom_nick(message: Message):
    nick = message.text.strip()
    upsert_user(message.chat.id, chesscom=nick)
    pending_binding.pop(message.chat.id, None)
    await message.answer(f"Chess.com —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω: {nick}", reply_markup=profile_kb)

@dp.message(F.text == "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—ã")
async def sync_games(message: Message):

    chat_id = message.chat.id
    lichess_nick, chesscom_nick = get_user_nicks(chat_id)
    if not (lichess_nick or chesscom_nick):
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å.",reply_markup=analysis_kb)

    await message.answer("–ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é‚Ä¶", reply_markup=analysis_kb)

    jobs: list[tuple[str, str]] = []
    if lichess_nick:
        lichess_pgns = getlastlichessgames(lichess_nick, max_games=30, period=7)
        jobs += [("lichess", p) for p in lichess_pgns]
    if chesscom_nick:
        chesscom_pgns = getlastchesscomgames(chesscom_nick, max_games=30, period=7)
        jobs += [("chesscom", p) for p in chesscom_pgns]

    new_game_count = 0
    total_blunders = 0
    loop = asyncio.get_running_loop()

    for source, pgn in jobs:
        game_id, is_new = save_game(chat_id, source, pgn)
        if not is_new:
            continue
        new_game_count += 1

        try:
            evals    = await loop.run_in_executor(None, geteval, pgn)
            bad_idxs = await loop.run_in_executor(None, findmove, evals)
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä—Ç–∏–∏ {game_id}: {e}")
            continue

        blunders = []
        for idx in bad_idxs:
            fen = get_fen_at_move(pgn, idx)
            blunders.append((idx, fen))

        save_blunders(game_id, blunders)
        total_blunders += len(blunders)

    await message.answer(f"üÜï –ù–æ–≤—ã—Ö –ø–∞—Ä—Ç–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {new_game_count}\n"f"‚ùå –ù–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_blunders}",reply_markup=analysis_kb)

@dp.message(F.text == "–ú–æ–∏ –æ—à–∏–±–∫–∏")
async def show_errors(message: Message):

    chat_id = message.chat.id
    rows = load_blunders(chat_id)
    if not rows:
        return await message.answer(
            "–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ ¬´–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—ã¬ª.",
            reply_markup=analysis_kb
        )

    for row in rows:
        blunder_id = row["blunder_id"]
        source     = row["source"]       # "lichess" –∏–ª–∏ "chesscom"
        idx0       = row["move_index"]   # 0-based –∏–Ω–¥–µ–∫—Å —Ö–æ–¥–∞
        move_num   = idx0 + 1            # 1-based

        fen_before = row["fen_before"]
        text = (
            f"#{blunder_id} | –∏—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
            f"–•–æ–¥ ‚Ññ{move_num}\n"
            f"<code>{fen_before}</code>"
        )
        await message.answer(text, parse_mode="HTML", reply_markup=analysis_kb)


@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def go_back(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

@dp.message()
async def fallback(message: Message):
    await message.answer(
        "–ù–µ –ø–æ–Ω—è–ª –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.",
        reply_markup=main_kb
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

